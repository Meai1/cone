// A test program in Cone that does nothing interesting

// Define a custom type that supports an array-like API
struct List
  mut arr [4] i32

  fn `[]`(index usize) i32
    arr[index]

  fn `&[]`(self &mut) &mut []i32
    &mut arr

fn listops()
  mut list = List[arr: [1, 5, 2, 8]]
  // imm r = &mut list[3]
  //imm q = *r

imm x = "abcdefghhijklmnoqrstuvwxyz"

mod submod
  include std
  mut r = 9
  fn incr()
    r=inc(r)

extern
  fn print(str *u8)

mut glowy = 34u32
mut glo2 i32 = 7

struct refstruct {ref &rc mut u32;}
fn rcmret() u32, &rc mut u32
  24u, &rc mut 32
fn rcstruct()
  if &cone != &cone
    imm x = &cone
  mut str refstruct
  mut s &own u32
  rcmret()
  str.ref, s = &rc mut 3, &own 2
  imm newstr = &own str
  return

struct Opaque
imm gloref &?Opaque = null  // nullable reference
fn rcpass(ref &rc mut u32) &rc mut u32
    if ref
        imm x = 3
    ref

fn rcx(ref &rc mut i32) &rc mut i32
    imm rcref &rc mut i32 = if (*ref == 10) {ref;} else {&rc mut 16;};
    rcref

fn rctest()
    mut rcref = &rc mut 32u32
    mut r2 = rcref
    rcref = r2 = rcx(r2)
    rcpass(rcref)
    mut rcref2 = &rc mut 4u32
    rcref2 = rcref
    *rcref = *rcref + 1

fn ptrs(mut a *i32, b *i32) Bool
    if a == null
      ++a
    b[*a] = a[0]
    --a
    mut r i32 = 4
    r = *a++
    a = a + 2
    a = a - 1
    imm z = b - a
    a += 4
    a -= 4
    a <= b

fn cone() u32
    submod::incr()
    rctest()
    print("hello")
    points()
    mut unsy = 23u
    unsy = unsy++
    imm newval = &unsy + 4u // auto-deref
    imm factptr = &fact
    factptr(3u)
    imm anonfn = &fn(x i32) i32 {x*x;};
    anonfn(3)
    '\t'
    2.3e1
    glowy = unsy
    glo2 = i32[2.3e1]
    bitfn(0x1au, 0x42u)
    array(2)
    mut z1 i32; mut z2 i32; z1,z2=swap(-2, 5)
    fact(6)
    calc(&glo2, 10)
    glowy // Implicit return of global var's value

// Structure handling test
struct Point
    x f32
    y f32
    z f32 = 2.

    fn decr(self &) f32
        x - 1.
    fn add(self &) f32
        x + self.y
    fn add(self) f32
        x + `()`()
    fn add(self, other) f32
        self.x + other.x
    fn `+=`(self &mut, other Point) Point
        x = x + other.x*x
        y = y + other.x*x
        z = z + other.x*x
        *self
    fn `()`() f32
        x - z
    set fn xset(self &mut, xx f32)
        imm m = Point[1., 2., 3.]
        x = xx

imm pp = Point[2., 3., 1.]
fn points()
    imm fval = 3f
    mut pt Point = Point[y: 1f, x: fval]
    mut xpt Point
    xpt.x = 3f
    &mut xpt
        y: .x
    do
        xpt.y = 3f
    (&pt).add()
    pt.decr
    pt += pt
    pt.add()
    pt();
    xpt = pt
    imm rpt = &mut pt
    imm a = rpt.x
    rpt.x = (pt.x).sqrt()

fn bitfn(a u32, b u32) u32
    mut bin = a==0x1au
    bin = b > 100u32
    if a>4u
      return b
    (a & u32[bin] | a ^ ~u32[b]) << 1

fn fact(mut nbr u32) u32
  mut result = 1u
  result += nbrx each nbrx in 1u < 10u by 2
  while nbr > 1 and !nbr>50
    result = result * nbr
    break if result > 10000u
    nbr = nbr - 1
  result
  // if nbr { nbr*fact(nbr-1); } else { 1; }
  
fn calc(aa &mut i32, b = 1) i32
  imm a = *aa
  *aa = 5
  *aa -= 2
  -a + (a+a)*b % b

fn array(index u32) u8
  mut a [4] u8 = [4u8, 10u8, 
    12u8, 40u8]
  imm r = &a[1]
  mut b = a
  imm slice = &mut b
  imm ptr *u8 = slice
  imm len = slice.len
  imm refelem = &mut slice[0]
  b[0] = a[2]
  slice[1] = b[3]
  slice[index]
  
fn swap(mut x i32, mut y i32) i32,i32
  x, y = y, x
  x,y

fn refs()
  mut a = 3
  mut b = &a
  if true
    mut c = 5
    // b = &c  // Uncomment for lifetime error

